package main

import (
	"bufio"
	"errors"
	"fmt"
	"log"
	"math"
	"os"
	"regexp"
	"strconv"
)

type Direction string

const (
	UP   Direction = "up"
	DOWN Direction = "down"
)

func validatePair(one int, two int, dir Direction) bool {
	if (dir == UP && one > two) || (dir == DOWN && one < two) {
		return false
	}
	diff := math.Abs(float64(one - two))
	if diff < 1 || diff > 3 {
		return false
	}
	return true
}

func isSafe(levels []int, chances int) bool {
	var mode = UP
	if levels[0] > levels[1] {
		mode = DOWN
	}

	fmt.Println("")

	for len(levels) > 1 {
		one := levels[0]
		two := levels[1]

		valid := validatePair(one, two, mode)
		if valid {
			levels = levels[1:]
			continue
		}

		if chances == 0 {
			fmt.Println("ran out of chances")
			return false
		}

		fmt.Println(one, "and", two, "is not safe")

		try1 := levels[1:]
		if isSafe(try1, 0) {
			fmt.Println(levels, "Safe by removing the element", levels[0])
			return true
		}

		try2 := append(levels[:1], levels[2:]...)
		if isSafe(try2, 0) {
			fmt.Println(levels, "Safe by removing the element", levels[1])
			return true
		}

		return false
	}

	return true
}

func handleLine(line string) bool {
	pattern := `\d+`
	re := regexp.MustCompile(pattern)

	matches := re.FindAllString(line, -1)

	levels := make([]int, len(matches))
	for i, str := range matches {
		num, err := strconv.Atoi(str)
		if err != nil {
			panic(errors.New(fmt.Sprintf("Error converting %s to int: %v\n", str, err)))
		}
		levels[i] = num
	}

	return isSafe(levels, 1)

}

func main() {
	file, err := os.Open("/Users/sjulia3/dev/github/julisch94/advent-of-code/2024/02/input1.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	var numOfSafe = 0

	scanner := bufio.NewScanner(file)
	// optionally, resize scanner's capacity for lines over 64K, see next example
	for scanner.Scan() {
		line := scanner.Text()
		safe := handleLine(line)

		fmt.Println(line, "is safe:", safe)

		if safe {
			numOfSafe++
		}
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}

	fmt.Println("Number of safe lines:", numOfSafe)

}
